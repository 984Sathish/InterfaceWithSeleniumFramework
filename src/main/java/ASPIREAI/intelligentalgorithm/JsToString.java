package ASPIREAI.intelligentalgorithm;

public class JsToString {

	public static String stabilizedListJs = null, stablizedJs = null, mainSource = null;

	public static String getStablizedListJs() {
		return stabilizedListJs = "\r\n" + "function getAlgoLocators(elem) {\r\n" + "\r\n"
				+ "	var arrayOfLocators = getUniqueSelector(elem);\r\n" + "	return arrayOfLocators;\r\n" + "\r\n"
				+ "}\r\n" + "\r\n" + "function getUniqueSelector(elSrc) {\r\n" + "	\r\n"
				+ "	if (!(elSrc instanceof Element)){\r\n" + "		//return;\r\n"
				+ "		if(elSrc instanceof Array){\r\n" + "		elSrc = elSrc[0];\r\n" + "	} else\r\n"
				+ "		return;\r\n" + "	}\r\n" + "\r\n" + "	var bSel = [];\r\n" + "\r\n" + "	/**\r\n"
				+ "	 *if value is not:\r\n" + "\r\n" + "	 *null\r\n" + "	 *undefined\r\n" + "	 *NaN\r\n"
				+ "	 *empty string (\"\")\r\n" + "	 *false\r\n" + "	 *0\r\n" + "	\r\n" + "	 **/\r\n" + "\r\n"
				+ "	 var locatorClass = getClass(elSrc);\r\n" + "	 if(locatorClass)\r\n"
				+ "	 bSel.push(locatorClass);\r\n" + "	\r\n" + "	\r\n"
				+ "	 var locatorClsNtype = getClassNtype(elSrc);\r\n" + "	 if(locatorClsNtype)\r\n"
				+ "	 bSel.push(locatorClsNtype);\r\n" + "	 \r\n"
				+ "	 var locatorNameAttr = getNameAttribute(elSrc);\r\n" + "	 if(locatorNameAttr)\r\n"
				+ "	 bSel.push(locatorNameAttr);\r\n" + "	 \r\n" + "	 \r\n"
				+ "	 var locatorNameNtype = getNameNtype(elSrc);  \r\n" + "	 if(locatorNameNtype)\r\n"
				+ "	 bSel.push(locatorNameNtype);\r\n" + "	 \r\n" + "	 var locatorId = getId(elSrc);\r\n"
				+ "	 if(locatorId)\r\n" + "	 bSel.push(locatorId);\r\n" + "	 \r\n" + "	 \r\n"
				+ "	 var locatorNtype = getNtype(elSrc)\r\n" + "	 if(locatorNtype)\r\n"
				+ "	 bSel.push(locatorNtype);\r\n" + "	 \r\n"
				+ "	 var locatorClsNchilid = getClassNtypeNchild(elSrc); \r\n" + "	 if(locatorClsNchilid)\r\n"
				+ "	 bSel.push(locatorClsNchilid);\r\n" + "	 \r\n" + "	 var locatorNchild = getNchild(elSrc);\r\n"
				+ "	 if(locatorNchild)\r\n" + "	 bSel.push(locatorNchild);\r\n" + "	 \r\n"
				+ "	 var locatorNtypeNchild = getNtypeNchild(elSrc);\r\n" + "	 if(locatorNtypeNchild)\r\n"
				+ "	 bSel.push(locatorNtypeNchild);\r\n" + "\r\n" + "	return bSel;\r\n" + "\r\n" + "}\r\n" + "\r\n"
				+ "\r\n" + "//To get an element with Id attribute\r\n" + "	\r\n" + "function getId(elem) {\r\n"
				+ "	var aSel = [], temp = [];\r\n" + "	var sSel, tempSel='';\r\n" + "	\r\n"
				+ "	tempSel = elem.nodeName.toLowerCase();\r\n" + "	\r\n" + "	getSelector = function(elem) {\r\n"
				+ "	\r\n" + "	if (!(elem instanceof Element)) return false;\r\n" + "	  \r\n" + "	\r\n"
				+ "	 if (elem.id) {\r\n" + "	        aSel.unshift('#' + elem.id);\r\n"
				+ "			 if (uniqueQuery()) {\r\n" + "	    	return aSel[0];\r\n" + "	      } \r\n"
				+ "	       return false;\r\n" + "	      }\r\n" + "		  else\r\n" + "		  return false;\r\n"
				+ "		  },\r\n" + "\r\n" + "	uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "	multiQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(temp.join('>')||null).length>=1;\r\n" + "	    };\r\n"
				+ "\r\n" + "	 while (elem = elem.parentNode) {\r\n" + "	    if (getSelector(elem)) {\r\n"
				+ "	     temp[0] = aSel.join(' > ');\r\n" + "		 temp[1] = tempSel;\r\n"
				+ "		 if(multiQuery())\r\n" + "		 return temp.join(' > ');\r\n" + "		 }\r\n" + "		 \r\n"
				+ "	    //elem = elem.parentNode;\r\n" + "	  }	\r\n" + "	 \r\n" + "	 \r\n" + "}\r\n" + "\r\n"
				+ "//To get an element with Class attribute\r\n" + "\r\n" + "function getClass(elem) {\r\n"
				+ "	var aSel = [], temp = [];\r\n" + "	var sSel, tempSel='';\r\n" + "	\r\n"
				+ "	 tempSel = elem.nodeName.toLowerCase();\r\n" + "	\r\n" + "	 getSelector = function(elem) {\r\n"
				+ "	 \r\n" + "	 if (!(elem instanceof Element)) return false;\r\n" + "	 \r\n"
				+ "	 aSel.unshift(sSel = elem.nodeName.toLowerCase());\r\n" + "	\r\n" + "	 if (elem.className) {\r\n"
				+ "	        aSel[0] = sSel += '.' + elem.className.trim().replace(/ +/g, '.');\r\n"
				+ "	        if (uniqueQuery()){\r\n" + "	        	return aSel[0];\r\n" + "	        }\r\n"
				+ "       }			\r\n" + "			return false;\r\n" + "	      } ,\r\n" + "		  \r\n"
				+ "		   uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "		multiQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(temp.join('>')||null).length>=1;\r\n" + "	    };\r\n"
				+ "		  \r\n" + "		  while (elem = elem.parentNode) {\r\n" + "	    if (getSelector(elem)) {\r\n"
				+ "	     temp[0] = aSel.join(' > ');\r\n" + "		 temp[1] = tempSel;\r\n"
				+ "		 if(multiQuery())\r\n" + "		 return temp.join(' > ');\r\n" + "		 }\r\n" + "		 \r\n"
				+ "	    //elem = elem.parentNode;\r\n" + "	  } \r\n" + "	\r\n" + "	      \r\n" + "	      }\r\n"
				+ "		  \r\n" + "\r\n" + "//To get an element with class and nth-type() function\r\n" + "\r\n"
				+ "function getClassNtype(elem) {\r\n" + "	var aSel = [], temp = [];\r\n" + "	var sSel, tempSel;\r\n"
				+ "	\r\n" + "	 tempSel = elem.nodeName.toLowerCase();\r\n" + "	\r\n"
				+ "	getSelector = function(elem) {\r\n" + "	\r\n"
				+ "	if (!(elem instanceof Element)) return false;\r\n" + "	\r\n"
				+ "	aSel.unshift(sSel = elem.nodeName.toLowerCase());\r\n" + "	\r\n" + "	 if (elem.className)\r\n"
				+ "	        aSel[0] = sSel += '.' + elem.className.trim().replace(/ +/g, '.');\r\n" + "			\r\n"
				+ "	       var elChild = elem,\r\n" + "	        sChild,\r\n" + "	        n = 1;\r\n"
				+ "	      while (elChild = elChild.previousElementSibling) {\r\n"
				+ "	        if (elChild.nodeName===elem.nodeName) ++n;\r\n" + "	      }\r\n"
				+ "	      aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "	      if (uniqueQuery()) {\r\n"
				+ "	    	  return true;\r\n" + "	      }\r\n" + "		  \r\n" + "		  return false;\r\n"
				+ "		  },\r\n" + "		  \r\n" + "	    uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "		multiQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(temp.join('>')||null).length>=1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "	 while (elem = elem.parentNode) {\r\n" + "	    if (getSelector(elem)) {\r\n"
				+ "	     temp[0] = aSel.join(' > ');\r\n" + "		 temp[1] = tempSel;\r\n"
				+ "		 if(multiQuery())\r\n" + "		 return temp.join(' > ');\r\n" + "		 }\r\n" + "	}\r\n"
				+ "	\r\n" + "	}\r\n" + "	\r\n" + "//To get locator name with array of attributes \r\n" + "\r\n"
				+ "function getNameAttribute(elem) {\r\n" + "\r\n" + "var aSel = [], temp = [];\r\n"
				+ "var sSel, tempSel; \r\n"
				+ "var aAttr = ['name', 'id', 'value', 'title', 'placeholder', 'data-*'];\r\n" + "\r\n"
				+ "tempSel = elem.nodeName.toLowerCase();\r\n" + "\r\n" + "  getSelector = function(el) {\r\n"
				+ "	 \r\n" + "	 if (!(el instanceof Element)) return false;\r\n" + "	 \r\n"
				+ "    aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "	\r\n"
				+ "	      for (var i=0; i<aAttr.length; ++i) {\r\n" + "	        if (aAttr[i]==='data-*') {\r\n"
				+ "	          // Build array of data attributes\r\n"
				+ "	          var aDataAttr = [].filter.call(el.attributes, function(attr) {\r\n"
				+ "	            return attr.name.indexOf('data-')===0;\r\n" + "	          });\r\n"
				+ "	          for (var j=0; j<aDataAttr.length; ++j) {\r\n"
				+ "	            aSel[0] = sSel += '[' + aDataAttr[j].name + '=\"' + aDataAttr[j].value + '\"]';\r\n"
				+ "	            if (uniqueQuery()) {\r\n" + "	            	return true;\r\n"
				+ "	            }\r\n" + "	          }\r\n" + "	        } else if (el[aAttr[i]]) {\r\n"
				+ "	          aSel[0] = sSel += '[' + aAttr[i] + '=\"' + el[aAttr[i]] + '\"]';\r\n"
				+ "	          if (uniqueQuery()){\r\n" + "	        	  return true;\r\n" + "	          }\r\n"
				+ "	        }\r\n" + "	      }\r\n" + "		  return false;\r\n" + "     },\r\n" + "\r\n"
				+ "      uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "		multiQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(temp.join('>')||null).length>=1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "	   while (elem = elem.parentNode) {\r\n" + "	    if (getSelector(elem)) {\r\n"
				+ "	     temp[0] = aSel.join(' > ');\r\n" + "		 temp[1] = tempSel;\r\n"
				+ "		 if(multiQuery())\r\n" + "		 return temp.join(' > ');\r\n" + "		 }\r\n" + "	  }\r\n"
				+ "	  return false;\r\n" + "	}\r\n" + "\r\n" + "\r\n" + "\r\n" + "	\r\n"
				+ "//To get an element with name and nth-type() function\r\n" + "function getNameNtype(elem) {\r\n"
				+ "\r\n" + "var aSel = [],temp = [];\r\n" + "var sSel, tempSel;\r\n"
				+ "var aAttr = ['name', 'id', 'value', 'title', 'placeholder', 'data-*'];\r\n" + "\r\n"
				+ "tempSel = elem.nodeName.toLowerCase();\r\n" + "\r\n" + "getSelector = function(el) {\r\n" + "\r\n"
				+ "if (!(el instanceof Element)) return false;\r\n" + "	 \r\n"
				+ "aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "	\r\n" + "\r\n"
				+ "	      for (var i=0; i<aAttr.length; ++i) {\r\n" + "	        if (aAttr[i]==='data-*') {\r\n"
				+ "	          // Build array of data attributes\r\n"
				+ "	          var aDataAttr = [].filter.call(el.attributes, function(attr) {\r\n"
				+ "	            return attr.name.indexOf('data-')===0;\r\n" + "	          });\r\n"
				+ "	          for (var j=0; j<aDataAttr.length; ++j) {\r\n"
				+ "	            aSel[0] = sSel += '[' + aDataAttr[j].name + '=\"' + aDataAttr[j].value + '\"]';\r\n"
				+ "	            if (uniqueQuery()) {\r\n" + "	            	//return true;\r\n"
				+ "	            }\r\n" + "	          }\r\n" + "	        } else if (el[aAttr[i]]) {\r\n"
				+ "	          aSel[0] = sSel += '[' + aAttr[i] + '=\"' + el[aAttr[i]] + '\"]';\r\n"
				+ "	          if (uniqueQuery()){\r\n" + "	        	 //return true;\r\n" + "	          }\r\n"
				+ "	        }\r\n" + "	      }\r\n" + "	      \r\n" + "	      var elChild = el,\r\n"
				+ "	        sChild,\r\n" + "	        n = 1;\r\n"
				+ "	      while (elChild = elChild.previousElementSibling) {\r\n"
				+ "	        if (elChild.nodeName===el.nodeName) ++n;\r\n" + "	      }\r\n"
				+ "	      aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "	      if (uniqueQuery()) {\r\n"
				+ "	    	  return true;\r\n" + "	      }\r\n" + "		  return false;\r\n" + "     },\r\n"
				+ "\r\n" + "      uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "		multiQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(temp.join('>')||null).length>=1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "	while (elem = elem.parentNode)  {\r\n" + "	    if (getSelector(elem)) {\r\n"
				+ "	     temp[0] = aSel.join(' > ');\r\n" + "		 temp[1] = tempSel;\r\n"
				+ "		 if(multiQuery())\r\n" + "		 return temp.join(' > ');\r\n" + "		 }\r\n" + "	  }\r\n"
				+ "	  \r\n" + "	}\r\n" + "\r\n" + "\r\n" + "\r\n"
				+ "//To get locator with nth-of-type funtion alone\r\n" + "\r\n" + "function getNtype(elem) {\r\n"
				+ "\r\n" + "var aSel = [],temp = [];\r\n" + "var sSel,tempSel;\r\n" + "\r\n"
				+ "tempSel = elem.nodeName.toLowerCase();\r\n" + "\r\n" + "getSelector = function(el) {\r\n" + "\r\n"
				+ "if (!(el instanceof Element)) return false;\r\n" + "\r\n"
				+ "aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "	      \r\n" + "	      var elChild = el,\r\n"
				+ "	        sChild,\r\n" + "	        n = 1;\r\n"
				+ "	      while (elChild = elChild.previousElementSibling) {\r\n"
				+ "	        if (elChild.nodeName===el.nodeName) ++n;\r\n" + "	      }\r\n"
				+ "	      aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "	      if (uniqueQuery()) {\r\n"
				+ "	    	  return true;\r\n" + "	      }\r\n" + "		  return false;\r\n" + "     },\r\n"
				+ "\r\n" + "      uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "		multiQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(temp.join('>')||null).length>=1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "	    while (elem = elem.parentNode) {\r\n" + "	    if (getSelector(elem)) {\r\n"
				+ "	     temp[0] = aSel.join(' > ');\r\n" + "		 temp[1] = tempSel;\r\n"
				+ "		 if(multiQuery())\r\n" + "		 return temp.join(' > ');\r\n" + "		 }\r\n" + "	  }\r\n"
				+ "	}\r\n" + "\r\n" + "\r\n" + "//To get locator with combination of nth-child\r\n" + "\r\n"
				+ "function getNchild(elem) {\r\n" + "\r\n" + "var aSel = [],temp = [];\r\n" + "var sSel,tempSel;\r\n"
				+ "\r\n" + "getSelector = function(el) {\r\n" + "\r\n"
				+ "if (!(el instanceof Element)) return false;	 \r\n" + "\r\n"
				+ "aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "	      \r\n" + "	      var elChild = el,\r\n"
				+ "	      n = 1;\r\n" + "	      while (elChild = elChild.previousElementSibling) ++n;\r\n"
				+ "	      aSel[0] = sSel = sSel.replace(/:nth-of-type\\(\\d+\\)/, n>1 ? ':nth-child(' + n + ')' : ':first-child');\r\n"
				+ "	      if (uniqueQuery()){\r\n" + "	    	  return true;\r\n" + "	      } \r\n" + "		  \r\n"
				+ "		  return false;\r\n" + "		  },\r\n" + "\r\n" + "      uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "	while (elem.parentNode) {\r\n"
				+ "	    if (getSelector(elem)) return aSel.join(' > ');\r\n" + "	    elem = elem.parentNode;\r\n"
				+ "	  } \r\n" + "	}\r\n" + "\r\n"
				+ "//To get locator with combination of Class and nth-child & nth-type concept\r\n" + "\r\n"
				+ "function getClassNtypeNchild(elem) {\r\n" + "	var aSel = [],temp = [];\r\n"
				+ "	var sSel,tempSel;\r\n" + "	\r\n" + "	tempSel = elem.nodeName.toLowerCase();\r\n" + "	\r\n"
				+ "	getSelector = function(el) {\r\n" + "	\r\n" + "	if (!(el instanceof Element)) return false;\r\n"
				+ "	\r\n" + "	aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "	\r\n"
				+ "	 if (el.className)\r\n"
				+ "	        aSel[0] = sSel += '.' + el.className.trim().replace(/ +/g, '.');\r\n" + "			\r\n"
				+ "	       var elChild = el,\r\n" + "	        sChild,\r\n" + "	        n = 1;\r\n"
				+ "	      while (elChild = elChild.previousElementSibling) {\r\n"
				+ "	        if (elChild.nodeName===el.nodeName) ++n;\r\n" + "	      }\r\n"
				+ "	      aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "	      if (uniqueQuery()) {\r\n"
				+ "	    	  //return true;\r\n" + "	      }\r\n" + "		  elChild = el,\r\n"
				+ "	      n = 1;\r\n" + "	      while (elChild = elChild.previousElementSibling) ++n;\r\n"
				+ "	      aSel[0] = sSel = sSel.replace(/:nth-of-type\\(\\d+\\)/, n>1 ? ':nth-child(' + n + ')' : ':first-child');\r\n"
				+ "	      if (uniqueQuery()){\r\n" + "	    	  return true;\r\n" + "	      } \r\n"
				+ "		  return false;\r\n" + "		  },\r\n" + "		  \r\n" + "	 uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "		multiQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(temp.join('>')||null).length>=1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "	while (elem = elem.parentNode) {\r\n" + "	    if (getSelector(elem)) {\r\n"
				+ "	     temp[0] = aSel.join(' > ');\r\n" + "		 temp[1] = tempSel;\r\n"
				+ "		 if(multiQuery())\r\n" + "		 return temp.join(' > ');\r\n" + "		 }\r\n" + "	  }\r\n"
				+ "	}\r\n" + "\r\n" + "//To get locator with combination of nth-child and nth-type \r\n" + "\r\n"
				+ "function getNtypeNchild(elem) {\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n" + "	\r\n"
				+ "	getSelector = function(el) {\r\n" + "	\r\n" + "	if (!(el instanceof Element)) return false;\r\n"
				+ "	\r\n" + "	aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "	\r\n"
				+ "	       var elChild = el,\r\n" + "	        sChild,\r\n" + "	        n = 1;\r\n"
				+ "	      while (elChild = elChild.previousElementSibling) {\r\n"
				+ "	        if (elChild.nodeName===el.nodeName) ++n;\r\n" + "	      }\r\n"
				+ "	      aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "	      if (uniqueQuery()) {\r\n"
				+ "	    	  //return true;\r\n" + "	      }\r\n" + "		  elChild = el,\r\n"
				+ "	      n = 1;\r\n" + "	      while (elChild = elChild.previousElementSibling) ++n;\r\n"
				+ "	      aSel[0] = sSel = sSel.replace(/:nth-of-type\\(\\d+\\)/, n>1 ? ':nth-child(' + n + ')' : ':first-child');\r\n"
				+ "	      if (uniqueQuery()){\r\n" + "	    	  return true;\r\n" + "	      } \r\n"
				+ "		  return false;\r\n" + "		  },\r\n" + "		  \r\n" + "	 uniqueQuery = function() {\r\n"
				+ "	      return document.querySelectorAll(aSel.join('>')||null).length===1;\r\n" + "	    };\r\n"
				+ "		\r\n" + "	while (elem.parentNode) {\r\n"
				+ "	    if (getSelector(elem)) return aSel.join(' > ');\r\n" + "	    elem = elem.parentNode;\r\n"
				+ "	  } \r\n" + "	}\r\n" + "\r\n" + "\r\n" + "return getAlgoLocators(arguments[0]);";
	}

	public static String getStablizedJs() {
		return stablizedJs = "\r\n" + "function getAlgoLocators(elem) {\r\n"
				+ "	// console.log(\"am an element type of following string: \");\r\n"
				+ "	// console.log(Object.prototype.toString.call(elem))\r\n"
				+ "	var arrayOfLocators = getUniqueSelector(elem);\r\n" + "	return arrayOfLocators;\r\n" + "\r\n"
				+ "}\r\n" + "\r\n" + "function getUniqueSelector(elSrc) {\r\n"
				+ "	if (!(elSrc instanceof Element)){\r\n" + "		//return;\r\n"
				+ "		if(elSrc instanceof Array){\r\n" + "		elSrc = elSrc[0];\r\n" + "	} else\r\n"
				+ "		return;\r\n" + "	}\r\n" + "	\r\n" + "\r\n" + "	var bSel = [];\r\n" + "\r\n" + "	/**\r\n"
				+ "	 *if value is not:\r\n" + "\r\n" + "	 *null\r\n" + "	 *undefined\r\n" + "	 *NaN\r\n"
				+ "	 *empty string (\"\")\r\n" + "	 *false\r\n" + "	 *0\r\n" + "	\r\n" + "	 **/\r\n" + "\r\n"
				+ "	var locatorId = getId(elSrc);\r\n" + "	if (locatorId)\r\n" + "		bSel.push(locatorId);\r\n"
				+ "	//return locatorId;\r\n" + "\r\n" + "	var locatorClass = getClass(elSrc);\r\n"
				+ "	if (locatorClass)\r\n" + "		bSel.push(locatorClass);\r\n" + "	//return locatorClsNtype;\r\n"
				+ "\r\n" + "	var locatorClsNtype = getClassNtype(elSrc);\r\n" + "	if (locatorClsNtype)\r\n"
				+ "		bSel.push(locatorClsNtype);\r\n" + "	//return locatorClsNtype;\r\n" + "\r\n"
				+ "	var locatorNameAttr = getNameAttribute(elSrc);\r\n" + "	if (locatorNameAttr)\r\n"
				+ "		bSel.push(locatorNameAttr);\r\n" + "	//return locatorNameAttr;\r\n" + "\r\n"
				+ "	var locatorNameNtype = getNameNtype(elSrc);\r\n" + "	if (locatorNameNtype)\r\n"
				+ "		bSel.push(locatorNameNtype);\r\n" + "	//return locatorNtype;\r\n" + "\r\n"
				+ "	/*var locatorNtype = getNtype(elSrc)\r\n" + "	if (locatorNtype)\r\n"
				+ "		bSel.push(locatorNtype);*/\r\n" + "	//return locatorNtype;\r\n" + "\r\n"
				+ "	/*var locatorNchild = getNchild(elSrc);\r\n" + "	if (locatorNchild)\r\n"
				+ "		bSel.push(locatorNchild);*/\r\n" + "	// return locatorNchild;\r\n" + "\r\n"
				+ "	var locatorClsNchilid = getClassNtypeNchild(elSrc);\r\n" + "	if (locatorClsNchilid)\r\n"
				+ "		bSel.push(locatorClsNchilid);\r\n" + "	//return locatorClsNchilid;\r\n" + "\r\n"
				+ "	/*var locatorNtypeNchild = getNtypeNchild(elSrc);\r\n" + "	if (locatorNtypeNchild)\r\n"
				+ "		bSel.push(locatorNtypeNchild);*/\r\n" + "	//return locatorNtypeNchild;\r\n" + "\r\n"
				+ "	return bSel;\r\n" + "\r\n" + "}\r\n" + "\r\n" + "//To get an element with Id attribute\r\n" + "\r\n"
				+ "function getId(elem) {\r\n" + "	console.log(elem);\r\n" + "	var aSel = [];\r\n" + "\r\n"
				+ "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	if (elem.id) {\r\n" + "		aSel.unshift('#' + elem.id);\r\n" + "		if (uniqueQuery()) {\r\n"
				+ "			return aSel[0];\r\n" + "		}\r\n" + "		return null;\r\n" + "	}\r\n" + "\r\n"
				+ "}\r\n" + "\r\n" + "//To get an element with Class attribute\r\n" + "\r\n"
				+ "function getClass(elem) {\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n"
				+ "	aSel.unshift(sSel = elem.nodeName.toLowerCase());\r\n" + "  \r\n"
				+ "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	if (elem.className) {\r\n"
				+ "		aSel[0] = sSel += '.' + elem.className.trim().replace(/ +/g, '.');\r\n"
				+ "		if (uniqueQuery()) {\r\n" + "			return aSel[0];\r\n" + "		}\r\n"
				+ "		return null;\r\n" + "	}\r\n" + "\r\n" + "}\r\n" + "\r\n"
				+ "//To get an element with class and nth-type() function\r\n" + "\r\n"
				+ "function getClassNtype(elem) {\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n" + "\r\n"
				+ "	getSelector = function(elem) {\r\n" + "		\r\n"
				+ "		if (!(elem instanceof Element)) return false;\r\n" + "\r\n"
				+ "		aSel.unshift(sSel = elem.nodeName.toLowerCase());\r\n" + "\r\n" + "		if (elem.className)\r\n"
				+ "			aSel[0] = sSel += '.' + elem.className.trim().replace(/ +/g, '.');\r\n" + "\r\n"
				+ "		var elChild = elem, sChild, n = 1;\r\n"
				+ "		while (elChild = elChild.previousElementSibling) {\r\n"
				+ "			if (elChild.nodeName === elem.nodeName)\r\n" + "				++n;\r\n" + "		}\r\n"
				+ "		aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "		if (uniqueQuery()) {\r\n"
				+ "			return true;\r\n" + "		}\r\n" + "\r\n" + "		return false;\r\n" + "	},\r\n" + "\r\n"
				+ "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	while (elem.parentNode) {\r\n" + "		if (getSelector(elem))\r\n"
				+ "			return aSel.join(' > ');\r\n" + "		elem = elem.parentNode;\r\n" + "	}\r\n" + "}\r\n"
				+ "\r\n" + "//To get locator name with array of attributes \r\n" + "\r\n"
				+ "function getNameAttribute(elem) {\r\n" + "\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n"
				+ "	var aAttr = ['name', 'value', 'title', 'placeholder', 'data-*' ];\r\n" + "\r\n"
				+ "	getSelector = function(el) {\r\n" + "		\r\n"
				+ "		if (!(el instanceof Element)) return false;\r\n" + "		\r\n"
				+ "		aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "\r\n"
				+ "		for (var i = 0; i < aAttr.length; ++i) {\r\n" + "			if (aAttr[i] === 'data-*') {\r\n"
				+ "				// Build array of data attributes\r\n"
				+ "				var aDataAttr = [].filter.call(el.attributes, function(attr) {\r\n"
				+ "					return attr.name.indexOf('data-') === 0;\r\n" + "				});\r\n"
				+ "				for (var j = 0; j < aDataAttr.length; ++j) {\r\n"
				+ "					aSel[0] = sSel += '[' + aDataAttr[j].name + '=\"'\r\n"
				+ "							+ aDataAttr[j].value + '\"]';\r\n"
				+ "					if (uniqueQuery()) {\r\n" + "						return true;\r\n"
				+ "					}\r\n" + "				}\r\n" + "			} else if (el[aAttr[i]]) {\r\n"
				+ "				aSel[0] = sSel += '[' + aAttr[i] + '=\"' + el[aAttr[i]] + '\"]';\r\n"
				+ "				if (uniqueQuery()) {\r\n" + "					return true;\r\n"
				+ "				}\r\n" + "			}\r\n" + "		}\r\n" + "		return false;\r\n" + "	},\r\n"
				+ "\r\n" + "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	while (elem.parentNode) {\r\n" + "		if (getSelector(elem))\r\n"
				+ "			return aSel.join(' > ');\r\n" + "		elem = elem.parentNode;\r\n" + "	}\r\n" + "}\r\n"
				+ "\r\n" + "//To get an element with name and nth-type() function\r\n"
				+ "function getNameNtype(elem) {\r\n" + "\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n"
				+ "	var aAttr = ['name', 'value', 'title', 'placeholder', 'data-*' ];\r\n" + "\r\n"
				+ "	getSelector = function(el) {\r\n" + "		\r\n"
				+ "		if (!(el instanceof Element)) return false;\r\n" + "		\r\n"
				+ "		aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "\r\n"
				+ "		for (var i = 0; i < aAttr.length; ++i) {\r\n" + "			if (aAttr[i] === 'data-*') {\r\n"
				+ "				// Build array of data attributes\r\n"
				+ "				var aDataAttr = [].filter.call(el.attributes, function(attr) {\r\n"
				+ "					return attr.name.indexOf('data-') === 0;\r\n" + "				});\r\n"
				+ "				for (var j = 0; j < aDataAttr.length; ++j) {\r\n"
				+ "					aSel[0] = sSel += '[' + aDataAttr[j].name + '=\"'\r\n"
				+ "							+ aDataAttr[j].value + '\"]';\r\n"
				+ "					if (uniqueQuery()) {\r\n" + "						//return true;\r\n"
				+ "					}\r\n" + "				}\r\n" + "			} else if (el[aAttr[i]]) {\r\n"
				+ "				aSel[0] = sSel += '[' + aAttr[i] + '=\"' + el[aAttr[i]] + '\"]';\r\n"
				+ "				if (uniqueQuery()) {\r\n" + "					// return true;\r\n"
				+ "				}\r\n" + "			}\r\n" + "		}\r\n" + "\r\n"
				+ "		var elChild = el, sChild, n = 1;\r\n"
				+ "		while (elChild = elChild.previousElementSibling) {\r\n"
				+ "			if (elChild.nodeName === el.nodeName)\r\n" + "				++n;\r\n" + "		}\r\n"
				+ "		aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "		if (uniqueQuery()) {\r\n"
				+ "			return true;\r\n" + "		}\r\n" + "		return false;\r\n" + "	},\r\n" + "\r\n"
				+ "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	while (elem.parentNode) {\r\n" + "		if (getSelector(elem))\r\n"
				+ "			return aSel.join(' > ');\r\n" + "		elem = elem.parentNode;\r\n" + "	}\r\n" + "}\r\n"
				+ "\r\n" + "//To get locator with nth-of-type funtion alone\r\n" + "\r\n"
				+ "function getNtype(elem) {\r\n" + "\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n" + "\r\n"
				+ "	getSelector = function(el) {\r\n" + "		\r\n"
				+ "		if (!(el instanceof Element)) return false;\r\n" + "\r\n"
				+ "		aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "\r\n"
				+ "		var elChild = el, sChild, n = 1;\r\n"
				+ "		while (elChild = elChild.previousElementSibling) {\r\n"
				+ "			if (elChild.nodeName === el.nodeName)\r\n" + "				++n;\r\n" + "		}\r\n"
				+ "		aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "		if (uniqueQuery()) {\r\n"
				+ "			return true;\r\n" + "		}\r\n" + "		return false;\r\n" + "	},\r\n" + "\r\n"
				+ "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	while (elem.parentNode) {\r\n" + "		if (getSelector(elem))\r\n"
				+ "			return aSel.join(' > ');\r\n" + "		elem = elem.parentNode;\r\n" + "	}\r\n" + "}\r\n"
				+ "\r\n" + "//To get locator with combination of nth-child\r\n" + "\r\n"
				+ "function getNchild(elem) {\r\n" + "\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n" + "\r\n"
				+ "	getSelector = function(el) {\r\n" + "		\r\n"
				+ "		if (!(el instanceof Element)) return false;\r\n" + "\r\n"
				+ "		aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "\r\n"
				+ "		var elChild = el, n = 1;\r\n" + "		while (elChild = elChild.previousElementSibling)\r\n"
				+ "			++n;\r\n" + "		aSel[0] = sSel = sSel.replace(/:nth-of-type\\(\\d+\\)/,\r\n"
				+ "				n > 1 ? ':nth-child(' + n + ')' : ':first-child');\r\n"
				+ "		if (uniqueQuery()) {\r\n" + "			return true;\r\n" + "		}\r\n" + "\r\n"
				+ "		return false;\r\n" + "	},\r\n" + "\r\n" + "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	while (elem.parentNode) {\r\n" + "		if (getSelector(elem))\r\n"
				+ "			return aSel.join(' > ');\r\n" + "		elem = elem.parentNode;\r\n" + "	}\r\n" + "}\r\n"
				+ "\r\n" + "//To get locator with combination of Class and nth-child & nth-type concept\r\n" + "\r\n"
				+ "function getClassNtypeNchild(elem) {\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n" + "\r\n"
				+ "	getSelector = function(el) {\r\n" + "		\r\n"
				+ "		if (!(el instanceof Element)) return false;\r\n" + "\r\n"
				+ "		aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "\r\n" + "		if (el.className)\r\n"
				+ "			aSel[0] = sSel += '.' + el.className.trim().replace(/ +/g, '.');\r\n" + "\r\n"
				+ "		var elChild = el, sChild, n = 1;\r\n"
				+ "		while (elChild = elChild.previousElementSibling) {\r\n"
				+ "			if (elChild.nodeName === el.nodeName)\r\n" + "				++n;\r\n" + "		}\r\n"
				+ "		aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "		if (uniqueQuery()) {\r\n"
				+ "			//return true;\r\n" + "		}\r\n" + "		elChild = el, n = 1;\r\n"
				+ "		while (elChild = elChild.previousElementSibling)\r\n" + "			++n;\r\n"
				+ "		aSel[0] = sSel = sSel.replace(/:nth-of-type\\(\\d+\\)/,\r\n"
				+ "				n > 1 ? ':nth-child(' + n + ')' : ':first-child');\r\n"
				+ "		if (uniqueQuery()) {\r\n" + "			return true;\r\n" + "		}\r\n"
				+ "		return false;\r\n" + "	},\r\n" + "\r\n" + "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	while (elem.parentNode) {\r\n" + "		if (getSelector(elem))\r\n"
				+ "			return aSel.join(' > ');\r\n" + "		elem = elem.parentNode;\r\n" + "	}\r\n" + "}\r\n"
				+ "\r\n" + "//To get locator with combination of nth-child and nth-type \r\n" + "\r\n"
				+ "function getNtypeNchild(elem) {\r\n" + "	var aSel = [];\r\n" + "	var sSel;\r\n" + "\r\n"
				+ "	getSelector = function(el) {\r\n" + "		\r\n"
				+ "		if (!(el instanceof Element)) return false;\r\n" + "\r\n"
				+ "		aSel.unshift(sSel = el.nodeName.toLowerCase());\r\n" + "\r\n"
				+ "		var elChild = el, sChild, n = 1;\r\n"
				+ "		while (elChild = elChild.previousElementSibling) {\r\n"
				+ "			if (elChild.nodeName === el.nodeName)\r\n" + "				++n;\r\n" + "		}\r\n"
				+ "		aSel[0] = sSel += ':nth-of-type(' + n + ')';\r\n" + "		if (uniqueQuery()) {\r\n"
				+ "			//return true;\r\n" + "		}\r\n" + "		elChild = el, n = 1;\r\n"
				+ "		while (elChild = elChild.previousElementSibling)\r\n" + "			++n;\r\n"
				+ "		aSel[0] = sSel = sSel.replace(/:nth-of-type\\(\\d+\\)/,\r\n"
				+ "				n > 1 ? ':nth-child(' + n + ')' : ':first-child');\r\n"
				+ "		if (uniqueQuery()) {\r\n" + "			return true;\r\n" + "		}\r\n"
				+ "		return false;\r\n" + "	},\r\n" + "\r\n" + "	uniqueQuery = function() {\r\n"
				+ "		return document.querySelectorAll(aSel.join('>') || null).length === 1;\r\n" + "	};\r\n" + "\r\n"
				+ "	while (elem.parentNode) {\r\n" + "		if (getSelector(elem))\r\n"
				+ "			return aSel.join(' > ');\r\n" + "		elem = elem.parentNode;\r\n" + "	}\r\n" + "}\r\n"
				+ "\r\n" + "return getAlgoLocators(arguments[0]);";
	}

	public static String getMainSource() {
		return mainSource = "			var preElem = [];\r\n" + "			var i=0;\r\n"
				+ "			var tableCount = 0;\r\n" + "\r\n" + "function generate(pgsrc) {\r\n"
				+ "            var input = {};\r\n" + "            var output = Object.extend(input);\r\n"
				+ "            output = setDefaultValues(output);\r\n"
				+ "            output = setDefinitions(output,pgsrc);\r\n"
				+ "            output.url = document.location.href;\r\n"
				+ "            var finalop = JSON.stringify(output);\r\n"
				//+ " console.log(finalop);"
				+ "            return finalop;\r\n"
				+ "        }\r\n" + "\r\n" + "Object.extend = function() {\r\n" + "    var key, source;\r\n"
				+ "    var target = {};\r\n" + "    for (var i = 0; i < arguments.length; i++) {\r\n"
				+ "        source = arguments[i];\r\n" + "        for (key in source) {\r\n"
				+ "            target[key] = source[key];\r\n" + "        }\r\n" + "    }\r\n"
				+ "    return target;\r\n" + "}\r\n" + "\r\n" + "Array.filter = function(source, predicate) {\r\n"
				+ "    source = source || [];\r\n" + "    var index = -1;\r\n" + "    var length = source.length;\r\n"
				+ "    var target = [];\r\n" + "    var targetIndex = -1;\r\n" + "\r\n"
				+ "    while (++index < length) {\r\n" + "        var item = source[index];\r\n"
				+ "        if (predicate(item, index, source)) {\r\n" + "            target[++targetIndex] = item;\r\n"
				+ "        }\r\n" + "    }\r\n" + "    return target;\r\n" + "}\r\n" + "\r\n"
				+ "function setDefaultValues(input) {\r\n" + "        var root = this;\r\n"
				+ "        root.LETTERS = { LOWER: 2, CAMEL: 3, NATURAL: 4, PROPER: 5, UPPER: 6 };\r\n"
				+ "        root.VISIBILITIES = { HIDDEN: 1, VISIBLE: 2, ALL: 3 };\r\n" + "        // attributes\r\n"
				+ "        input.attributes = {};\r\n" + "        input.attributes.letter = root.LETTERS.CAMEL;\r\n"
				+ "        input.attributes.indent = false;\r\n" + "        input.attributes.separator = '\\n';\r\n"
				+ "\r\n" + "        // copyright\r\n" + "        input.copyright = {};\r\n"
				+ "        input.copyright.claimant = '';\r\n" + "        input.copyright.year = '';\r\n" + "\r\n"
				+ "        // fill\r\n" + "        input.fill = {};\r\n" + "        input.fill.separator = '';\r\n"
				+ "\r\n" + "        // model\r\n" + "        input.model =  {};\r\n"
				+ "        input.model.include = false;\r\n" + "        input.model.name = '';\r\n"
				+ "        input.model.namespace = '';\r\n" + "        input.model.target = '';\r\n" + "\r\n"
				+ "        // nodes\r\n" + "        input.nodes =  {};\r\n"
				+ "        // using test framework with AngularJS locators support\r\n"
				+ "        input.nodes.angular = false;\r\n" + "        input.nodes.root = 'body';\r\n"
				+ "        input.nodes.selector = 'a,button,input,select,textarea,span,p,div,tbody,div>input' ; // Bhaskar updated 'td'\r\n"
				+ "        input.nodes.visibility =  root.VISIBILITIES.VISIBLE;\r\n" + "\r\n"
				+ "        // operations\r\n" + "        input.operations = {};\r\n"
				+ "        input.operations.extras =  {};\r\n" + "\r\n" + "        // operations.extras\r\n"
				+ "        input.operations.extras.fill = 1;\r\n"
				+ "        input.operations.extras.fill.submit =1;\r\n"
				+ "        input.operations.extras.submit =1;\r\n" + "        input.operations.extras.verify={};\r\n"
				+ "        input.operations.extras.verify.loaded =1;\r\n"
				+ "        input.operations.extras.verify.url = 1;\r\n" + "\r\n"
				+ "        input.operations.letter = root.LETTERS.CAMEL;\r\n"
				+ "        input.operations.separator = '\\n';\r\n" + "\r\n" + "        input.timeout = 15;\r\n"
				+ "        return input;\r\n" + "    }\r\n" + "\r\n" + "var ELEMENT_NODE = 1;\r\n"
				+ "var NG_PREFIXES = ['ng-','data-ng-','ng_','x-ng-','ng\\\\:'];\r\n"
				+ "var NG_STRATEGIES = [ { handler: getNgModelName, strategy: 'model' } ];\r\n"
				+ "var SHOW_COMMENT = 128;\r\n" + "\r\n"
				+ "// ========================================================================\r\n"
				+ "// private functions\r\n" + "\r\n" + "function getAttributeSelector(name, node) {\r\n"
				+ "    var response = '';\r\n" + "    var value = node.getAttribute(name);\r\n" + "\r\n"
				+ "    if (value) {\r\n" + "        var selector = node.nodeName.toLowerCase();\r\n"
				+ "        if (name === 'class') {\r\n" + "			//console.log(value.trim());\r\n"
				+ "			try{\r\n" + "            selector += '.' + value.trim().split(/\\s+/g).join('.');\r\n"
				+ "			}\r\n" + "			catch(e){\r\n"
				+ "				if (e.message == 'Invalid flags supplied to RegExp constructor ' +'\\'' +'gg' +'\\''){\r\n"
				+ "					selector += '.' + value.trim().split(/\\s+/).join('.');\r\n"
				+ "				}\r\n" + "			}\r\n" + "        }\r\n" + "        else {\r\n"
				+ "            value = value.replace(/\\r?\\n|\\r/g, '');\r\n"
				+ "            selector += '[' + name + '=\\'' + value + '\\']';\r\n" + "        }\r\n"
				+ "        try {\r\n" + "            var elements = document.querySelectorAll(selector);\r\n"
				+ "			//console.log(!elements.match(/?/));\r\n"
				+ "            if (elements.length === 1 && value.length < 100) {\r\n"
				+ "                response = selector;\r\n" + "            }\r\n" + "        } catch (ex) {\r\n"
				+ "            // bad selector. skipping.\r\n" + "        }\r\n" + "    }\r\n" + "\r\n"
				+ "    return response;\r\n" + "}\r\n" + "\r\n"
				+ "//To identify xpath of a given node or element in DOM using text method of value Innertext\r\n"
				+ " function getXPATHSelector(node) {\r\n" + "    var response = '';\r\n" + "\r\n"
				+ "    if (node.innerText) {\r\n" + "		var value = node.innerText.trim();\r\n"
				+ "		for (; node && node.nodeType === ELEMENT_NODE; node = node.parentNode) {\r\n"
				+ "			if(node.nodeName=='TABLE'){\r\n"
				+ "				selector = '\\//' + '*[text()' +'\\='  +'\\'' +value +'\\'' +']';\r\n"
				+ "				//console.log(selector);\r\n" + "				try {\r\n"
				+ "					//var element = document.evaluate( selector, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null ).singleNodeValue.innerText;\r\n"
				+ "					var element = document.evaluate( selector, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null );\r\n"
				+ "					if(element.snapshotLength == 1){\r\n"
				+ "						if (element.snapshotItem(0).innerText.trim() === value ) {\r\n"
				+ "							response = selector;\r\n" + "						}\r\n"
				+ "					}\r\n" + "				} catch (ex) {\r\n"
				+ "					//console.log(ex)\r\n" + "					// bad selector. skipping.\r\n"
				+ "				}\r\n" + "				break;\r\n" + "			}\r\n" + "		}\r\n" + "    }\r\n"
				+ "    return response;\r\n" + "}\r\n" + "\r\n" + "function getClosestSibling(node, siblings) {\r\n"
				+ "    var copies = [].slice.call(siblings);\r\n" + "    copies.unshift(node);\r\n"
				+ "    var copiesLength = copies.length;\r\n" + "    var closest = 1;\r\n" + "\r\n"
				+ "    if (closest > copiesLength) {\r\n" + "        closest = 0;\r\n" + "    }\r\n" + "\r\n"
				+ "    var nodeIndex = 0;\r\n" + "    var siblingIndex = closest;\r\n" + "\r\n"
				+ "    for (var i = 0; i < copiesLength; i++) {\r\n"
				+ "        var delta = Math.abs(nodeIndex - i);\r\n" + "\r\n" + "        if (delta > closest) {\r\n"
				+ "            closest = delta;\r\n" + "            siblingIndex = i;\r\n" + "        }\r\n"
				+ "    }\r\n" + "\r\n" + "    return (siblingIndex === 0) ? null : copies[siblingIndex];\r\n" + "}\r\n"
				+ "\r\n" + "function getComments(root) {\r\n" + "    var comments = [];\r\n" + "    var index = -1;\r\n"
				+ "    var walker = document.createTreeWalker(root, SHOW_COMMENT, null, false);\r\n" + "\r\n"
				+ "    while (walker.nextNode()) {\r\n" + "        comments[++index] = walker.currentNode;\r\n"
				+ "    }\r\n" + "\r\n" + "    return comments;\r\n" + "}\r\n" + "\r\n"
				+ "function getCSSSelector(node) {\r\n" + "    var selector = '';\r\n" + "\r\n"
				+ "	var debugNode = node;\r\n" + "	var	debugNodePar = node.parentNode;\r\n" + "\r\n"
				+ "	/*if( node.innerText.trim() === \"View All Shop By License\")\r\n" + "		{\r\n"
				+ "		 console.log(debugNode);\r\n" + "		 console.log(debugNodePar);\r\n" + "		}*/\r\n"
				+ "\r\n" + "    for (; node && node.nodeType === ELEMENT_NODE; node = node.parentNode) {\r\n" + "\r\n"
				+ "		/*if(debugNode.innerText.trim()==\"View All Shop By License\"){\r\n"
				//+ "		console.log(node);\r\n" 
				+ "		}*/\r\n" + "\r\n" + "        if (node && node.id) {\r\n"
				+ "            selector = '#' + node.id + ' ' + selector;\r\n" + "            break;\r\n"
				+ "        }\r\n" + "        else {\r\n" + "            var nodeName = node.nodeName;\r\n"
				+ "            var currentSelector = nodeName.toLowerCase();\r\n"
				+ "            var index = getNodeIndex(node, nodeName);\r\n" + "\r\n"
				+ "            if (index > 0) {\r\n" + "                // it has siblings\r\n"
				+ "                currentSelector += ':nth-of-type(' + index + ')';\r\n"
				+ "				selector = '>' +currentSelector +' ' + selector;  //selva\r\n" + "            }\r\n"
				+ "            else {\r\n" + "\r\n" + "				if (node.className !== '') {\r\n"
				+ "					currentSelector += '[class=\\'' + node.className +'\\']';    //selva\r\n"
				+ "                    //currentSelector += '.' + node.className.split(/\\s+/g).join('.');\r\n"
				+ "                }\r\n" + "\r\n" + "                if (nodeName === 'INPUT') {\r\n"
				+ "                    if (node.getAttribute('type')) {\r\n"
				+ "                        currentSelector += '[type=\\'' + node.type + '\\']';\r\n"
				+ "                    }\r\n" + "                    else if (node.getAttribute('data-type')) {\r\n"
				+ "                        currentSelector += '[data-type=\\'' +\r\n"
				+ "                            node.getAttribute('data-type') + '\\']';\r\n"
				+ "                    }\r\n" + "                }\r\n"
				+ "				 selector = currentSelector + ' ' + selector;   //selva\r\n" + "            }\r\n"
				+ "\r\n" + "\r\n" + "        }\r\n" + "    }\r\n"
				+ "	/*if(debugNode.innerText.trim()==\"View All Shop By License\"){\r\n"
				+ "	console.log(selector);\r\n" + "	}*/\r\n" + "\r\n"
				+ "    return selector.replace(/^html[^\\b]*\\bbody\\b/, '').trim();\r\n" + "}\r\n" + "\r\n"
				+ "function getValidVariableName(name) {\r\n"
				+ "    if (name.length && !/[$_a-zA-Z]/.test(name[0])) {\r\n" + "        //return '_' + name;\r\n"
				+ "		return name;\r\n" + "    }\r\n" + "    return name;\r\n" + "}\r\n" + "\r\n"
				+ "function getDefinition(input) {\r\n" + "    input = input || {};\r\n"
				+ "    var actionLowered = input.action.toLowerCase();\r\n"
				+ "    var buffer = Object.extend(input.buffer);\r\n" + "    // deep copy\r\n"
				+ "    buffer.attribute = Object.extend(buffer.attribute);\r\n"
				+ "    buffer.operation = Object.extend(buffer.operation);\r\n" + "    var suffixes = {\r\n"
				+ "        action: (actionLowered === 'click') ? ' on' : '',\r\n"
				+ "        label: (actionLowered === 'set') ? ' Field' : ''\r\n" + "    };\r\n"
				+ "    suffixes.documentation = ' ' + getLetter(input.fullText || input.text, LETTERS.NATURAL) +\r\n"
				+ "        ' ' + (input.label + suffixes.label.toLowerCase()) + '.';\r\n"
				+ "    suffixes.name = ' ' + input.text + ' ' + input.label + suffixes.label;\r\n" + "\r\n"
				+ "    if (input.negate) {\r\n" + "        input.action = 'Un' + actionLowered;\r\n"
				+ "        buffer.negate = 1;\r\n" + "    }\r\n" + "\r\n" + "    if (input.hasArgument) {\r\n"
				+ "        suffixes.action = (input.negate) ? ' value from' : ' value to';\r\n"
				+ "        buffer.argument = {};\r\n"
				+ "        buffer.argument.documentation = input.action + ' default' +\r\n"
				+ "            suffixes.action + suffixes.documentation;\r\n"
				+ "        buffer.argument.key = getLetter(input.text, LETTERS.UPPER);\r\n"
				+ "        buffer.argument.name = getLetter(input.text + ' value',\r\n"
				+ "            input.letters.attribute);\r\n" + "    }\r\n" + "\r\n"
				+ "	//To remove duplicate attribute name by appending string \"SecondReference\"\r\n"
				+ "	if (i==0){\r\n" + "	preElem[i] = getLetter(input.text, input.letters.attribute);\r\n"
				+ "	i = preElem.length;\r\n" + "	}else{\r\n"
				+ "		if((preElem.indexOf(getLetter(input.text, input.letters.attribute))) > -1){\r\n"
				+ "		//console.log(\"duplicate name found is \" +getLetter(input.text, input.letters.attribute));\r\n"
				+ "		var curName = getLetter(input.text, input.letters.attribute);\r\n"
				+ "			if ((preElem.indexOf(curName.concat(\"SecondReference\"))) > -1){\r\n"
				+ "				preElem[preElem.length] = curName.concat(\"ThirdReference\");\r\n"
				+ "			}else{\r\n" + "			preElem[preElem.length] = curName.concat(\"SecondReference\");\r\n"
				+ "			}\r\n" + "		}else{\r\n"
				+ "			preElem[preElem.length]=getLetter(input.text, input.letters.attribute)\r\n" + "		}\r\n"
				+ "	}\r\n" + "\r\n" + "	//logic to append parentElement name to child elements name\r\n"
				+ "	var lnode = input.node;\r\n"
				+ "	for (; lnode && lnode.nodeType === ELEMENT_NODE; lnode = lnode.parentNode) {\r\n"
				+ "		var nodeName = lnode.nodeName;\r\n"
				+ "        var currentSelector = nodeName.toLowerCase();\r\n"
				+ "		if (currentSelector==\"a\"){\r\n" + "			lnode = lnode.parentNode;\r\n"
				+ "			nodeName = lnode.nodeName;\r\n" + "			currentSelector = nodeName.toLowerCase();\r\n"
				+ "			if (currentSelector==\"li\"){\r\n" + "\r\n" + "			}\r\n" + "		}\r\n" + "\r\n"
				+ "\r\n" + "	}\r\n" + "\r\n" + "\r\n"
				+ "    buffer.attribute.name = getValidVariableName(preElem[preElem.length-1]);\r\n"
				+ "    buffer.operation.documentation = input.action + suffixes.action +\r\n"
				+ "        suffixes.documentation;\r\n"
				+ "    buffer.operation.name = getLetter(input.action + suffixes.name,\r\n"
				+ "        input.letters.operation, input.action);\r\n" + "\r\n" + "    return buffer;\r\n" + "}\r\n"
				+ "\r\n" + "function getFileName(path) {\r\n"
				+ "    return path.substring(path.lastIndexOf('/') + 1, path.lastIndexOf('.'));\r\n" + "}\r\n" + "\r\n"
				+ "function getHiddens(cloned, original) {\r\n"
				+ "    var clones = cloned.getElementsByTagName('*');\r\n"
				+ "    var originals = original.getElementsByTagName('*');\r\n"
				+ "    var hiddens = (cloned) ? Array.filter(cloned.querySelectorAll(\r\n"
				+ "        '*:not(br):not(img):not(input):not(link):not(option):not(script):not(select):not(style)'\r\n"
				+ "    ), function(item, index) {\r\n" + "        var sourceIndex = [].indexOf.call(clones, item);\r\n"
				+ "        return originals[sourceIndex].offsetHeight < 1 || !isElementInViewport(item);\r\n"
				+ "    }) : [];\r\n" + "    return hiddens;\r\n" + "}\r\n" + "\r\n"
				+ "function getSpecialNodeText(node) {\r\n" + "\r\n" + "	var text = '';\r\n"
				+ "	var regex = /^[A-Za-z0-9]+$/;\r\n" + "	if(node.innerText){\r\n"
				+ "		if (node.getAttribute('class')=='x-btn-wrap x-btn-wrap-gw-top-menu-toolbar-small x-btn-split x-btn-split-right'){\r\n"
				+ "			text = node.innerText || node.textContent;\r\n" + "			text = text +'drpdwnArrow';\r\n"
				+ "			}\r\n" + "		else{\r\n" + "			text = node.innerText || node.textContent;\r\n"
				+ "		}\r\n" + "	}\r\n" + "\r\n"
				+ "	if (node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small g-unsavedwork-icon '){\r\n"
				+ "		text = 'saveIcon';\r\n" + "		}\r\n"
				+ "	else if(node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small x-tbar-page-prev '){\r\n"
				+ "		text = 'prevPageArrow';\r\n" + "		}\r\n"
				+ "	else if(node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small x-tbar-page-first '){\r\n"
				+ "		text = 'firstPageArrow';\r\n" + "		}\r\n"
				+ "	else if(node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small x-tbar-page-next '){\r\n"
				+ "		text = 'nextPageArrow';\r\n" + "		}\r\n"
				+ "	else if(node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small x-tbar-page-last '){\r\n"
				+ "		text = 'lastPageArrow';\r\n" + "		}\r\n"
				+ "	else if(node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small g-preferences-icon '){\r\n"
				+ "		text = 'preferenceIcon';\r\n" + "		}\r\n" + "	else{\r\n" + "	}\r\n" + "\r\n"
				+ "	text.trim();\r\n" + "	if (!text.match(/\\w/)){\r\n" + "		text = '';\r\n" + "	}\r\n"
				+ "	return text;\r\n" + "\r\n" + "}\r\n" + "\r\n" + "function getLabelText(node) {\r\n"
				+ "    var text = '';\r\n" + "\r\n" + "    if (node && node.id) {\r\n"
				+ "        text = getLabelTextFor(node, 'id');\r\n" + "    }\r\n" + "\r\n"
				+ "    if (text === '' && node && node.name) {\r\n" + "        // non-standard, but it happens\r\n"
				+ "        text = getLabelTextFor(node, 'name');\r\n" + "    }\r\n" + "\r\n" + "\r\n"
				+ "    if (text === '') {\r\n" + "        // find label from siblings\r\n"
				+ "        // TODO: should use more aggressive collector\r\n"
				+ "        var labels = (node && node.parentNode) ?\r\n"
				+ "            node.parentNode.querySelectorAll('label') : [];\r\n"
				+ "        var label = getClosestSibling(node, labels);\r\n" + "\r\n" + "        if (label) {\r\n"
				+ "            text = label.textContent || label.innerText || '';\r\n"
				+ "            text = text.trim();\r\n" + "        }\r\n" + "    }\r\n" + "\r\n"
				+ "    return text;\r\n" + "}\r\n" + "\r\n" + "function getLabelTextFor(node, attribute) {\r\n"
				+ "    var identifier = node.getAttribute(attribute) || node[attribute] || '';\r\n"
				+ "    var text = '';\r\n" + "\r\n" + "    if (identifier) {\r\n"
				+ "        var label = document.querySelector('label[for=\"' + identifier + '\"]');\r\n" + "\r\n"
				+ "        if (label) {\r\n" + "            text = label.textContent || label.innerText || '';\r\n"
				+ "            text = text.trim();\r\n" + "        }\r\n" + "\r\n" + "        if (text === '') {\r\n"
				+ "            var identifierLowered = identifier.toLowerCase();\r\n"
				+ "            var labels = Array.filter(document.querySelectorAll('label[for]'), function(item) {\r\n"
				+ "                return item.getAttribute('for').toLowerCase() === identifierLowered;\r\n"
				+ "            });\r\n" + "\r\n" + "            label = getClosestSibling(node, labels);\r\n" + "\r\n"
				+ "            if (label) {\r\n"
				+ "                text = label.textContent || label.innerText || '';\r\n"
				+ "                text = text.trim();\r\n" + "            }\r\n" + "        }\r\n" + "\r\n"
				+ "		if(node.getAttribute('value')){\r\n" + "			text = node.getAttribute('value');\r\n"
				+ "		}\r\n" + "\r\n" + "		if(node.getAttribute('placeholder')){\r\n"
				+ "			text = node.getAttribute('placeholder');\r\n" + "		}\r\n" + "\r\n"
				+ "		if(node.getAttribute('title')){\r\n" + "			text = node.getAttribute('title');\r\n"
				+ "		}\r\n" + "    }\r\n" + "\r\n" + "    return text;\r\n" + "}\r\n" + "\r\n"
				+ "function getLetter(value, type, action) {\r\n" + "    action = action || '';\r\n"
				+ "    type = type || LETTERS.CAMEL;\r\n" + "    type = parseInt(type);\r\n"
				+ "    value = value || '';\r\n" + "\r\n" + "    if (type !== LETTERS.NATURAL) {\r\n"
				+ "        // move number prefix to the end of the value\r\n"
				+ "        var oldValue = value.replace(action, '').trim();\r\n"
				+ "        var numberPrefix = /^([\\d.]+)/.exec(oldValue);\r\n" + "        if (numberPrefix) {\r\n"
				+ "            value = value.replace(numberPrefix[0], '') + ' ' + numberPrefix[0];\r\n"
				+ "        }\r\n" + "    }\r\n" + "\r\n" + "    switch (type) {\r\n" + "        case LETTERS.LOWER:\r\n"
				+ "        case LETTERS.UPPER:\r\n"
				+ "            value = value.replace(/\\./g, '_').replace(/\\s+|__/g, '_').replace(/^_|_$/g, '');\r\n"
				+ "            value = (type === LETTERS.LOWER) ? value.toLowerCase() : value.toUpperCase();\r\n"
				+ "            break;\r\n" + "        case LETTERS.CAMEL:\r\n" + "        case LETTERS.PROPER:\r\n"
				+ "            value = value.replace(/\\./g, ' ').trim().replace(/\\s\\s+/g, ' ').\r\n"
				+ "                replace(/\\w\\S*/g, function(word) {\r\n"
				+ "                    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\r\n"
				+ "                }).replace(/\\s+/g, '');\r\n" + "            if (type === LETTERS.CAMEL) {\r\n"
				+ "                value = value.charAt(0).toLowerCase() + value.substr(1);\r\n" + "            }\r\n"
				+ "            break;\r\n" + "        case LETTERS.NATURAL:\r\n"
				+ "            value = value.trim().replace(/\\s\\s+/g, ' ').replace(/\\w\\S*/g, function(word) {\r\n"
				+ "                    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\r\n"
				+ "                });\r\n" + "            break;\r\n" + "    }\r\n" + "\r\n" + "    return value;\r\n"
				+ "}\r\n" + "\r\n" + "function getLinkText(node) {\r\n"
				+ "    var image = node.querySelector('img');\r\n" + "    var text = '';\r\n" + "\r\n"
				+ "    if (image) {\r\n" + "        text = image.alt || getFileName(image.src);\r\n" + "    }\r\n"
				+ "\r\n" + "    return text.trim();\r\n" + "}\r\n" + "\r\n" + "function getLocator(node, angular) {\r\n"
				+ "    var response = {};\r\n" + "\r\n" + "    if (angular) {\r\n"
				+ "        response = getNgLocator(node);\r\n" + "    }\r\n" + "\r\n" + "	// Added by Bhaskar\r\n"
				//+"console.log('angular'+node.nodeName);"
				+ "    if (node.nodeName == \"TBODY\"){\r\n" + "		tableCount ++        	\r\n" + "\r\n"
				+ "        if (!response.value && node.parentNode.id) {\r\n"
				+ "            response.strategy = 'id';\r\n" + "			response.value = node.parentNode.id;\r\n"
				+ "			return response;\r\n" + "        }\r\n"
				+ "        else if (!response.value && node.parentNode.name) {\r\n"
				+ "            response.strategy = 'name';\r\n" + "			response.value = node.parentNode.name;\r\n"
				+ "			return response;\r\n" + "        }\r\n" + "        else {\r\n"
				+ "		response.strategy = 'xpath';\r\n"
				+ "		response.value = \"//table[\" + tableCount + \"]/tbody\";    // value = \"//table[1]/tbody\"\r\n"
				+ "		return response;\r\n" + "        }\r\n" + "    }\r\n" + "    \r\n"
				+ "    if (node.parentNode.nodeName == \"TR\" || node.parentNode.nodeName == \"TD\"){\r\n"
				+ "    	return response;\r\n" + "    }\r\n" + "	//\r\n" + "\r\n" + "    if (!response.strategy) {\r\n"
				+ "\r\n" + "		// Commented by Bhaskar for table					  \r\n"
				+ "		//if(!response.value){\r\n" + "		//	response.strategy = 'xpath';\r\n"
				+ "		//	response.value = //getXPATHSelector(node);\r\n" + "		//	}\r\n" + "\r\n"
				+ "        if (!response.value && node.id) {\r\n" + "            response.strategy = 'id';\r\n"
				+ "			response.value = node.id;\r\n"
				+ "			response.secondStrategy = 'css'; //Added by Sudha\r\n"
				+ "			response.secondValue = getCSSSelector(node); // Added by Sudha\r\n" + "        }\r\n"
				+ "\r\n" + "        else if (!response.value && node.name) {\r\n"
				+ "            response.strategy = 'name';\r\n" + "			response.value = node.name;\r\n"
				+ "			response.secondStrategy = 'css'; //Added by Sudha\r\n"
				+ "			response.secondValue = getCSSSelector(node); // Added by Sudha\r\n" + "        }\r\n"
				+ "\r\n" + "        else {\r\n" + "\r\n"
				+ "            if (!response.value && node.getAttribute('class')) {\r\n"
				+ "				response.strategy = 'css';\r\n"
				+ "                response.value = getAttributeSelector('class', node);\r\n" + "            }\r\n"
				+ "\r\n" + "            if (!response.value && node.title) {\r\n"
				+ "				response.strategy = 'css';\r\n"
				+ "                response.value = getAttributeSelector('title', node);\r\n" + "            }\r\n"
				+ "\r\n" + "            if (!response.value && node.getAttribute('href')) {\r\n"
				+ "				response.strategy = 'css';\r\n"
				+ "                response.value = getAttributeSelector('href', node);\r\n" + "            }\r\n"
				+ "\r\n" + "            if (!response.value) {\r\n" + "				response.strategy = 'css';\r\n"
				+ "                response.value = getCSSSelector(node);\r\n" + "            }\r\n" + "        }\r\n"
				+ "    }\r\n" + "\r\n" + "    return response;\r\n" + "}\r\n" + "\r\n"
				+ "function getLongestName(name, longest) {\r\n" + "    name = name || '';\r\n"
				+ "    var length = name.length;\r\n" + "\r\n" + "    if (length > longest) {\r\n"
				+ "        longest = length;\r\n" + "    }\r\n" + "\r\n" + "    return longest;\r\n" + "}\r\n" + "\r\n"
				+ "function getNgLocator(node) {\r\n" + "    var response = {};\r\n" + "\r\n"
				+ "    for (var i = 0, j = NG_STRATEGIES.length; i < j; i++) {\r\n"
				+ "        var item = NG_STRATEGIES[i];\r\n" + "        var value = item.handler(node);\r\n" + "\r\n"
				+ "        if (value) {\r\n" + "            response.strategy = item.strategy;\r\n"
				+ "            response.value = value;\r\n" + "        }\r\n" + "    }\r\n" + "\r\n"
				+ "    return response;\r\n" + "}\r\n" + "\r\n" + "function getNgModelName(node) {\r\n"
				+ "    var name = '';\r\n" + "\r\n" + "    for (var i = 0, j = NG_PREFIXES.length; i < j; i++) {\r\n"
				+ "        name = node.getAttribute(NG_PREFIXES[i] + 'model') || '';\r\n" + "\r\n"
				+ "        if (name) {\r\n" + "            break;\r\n" + "        }\r\n" + "    }\r\n" + "\r\n"
				+ "    return name.trim();\r\n" + "}\r\n" + "\r\n" + "function getNodeIndex(node, nodeName) {\r\n"
				+ "    nodeName = nodeName || node.nodeName;\r\n" + "\r\n"
				+ "    var siblings = (node && node.parentNode) ?\r\n"
				+ "        Array.filter(node.parentNode.children, function(item, index) {\r\n"
				+ "            return item.nodeName === nodeName;\r\n" + "        }) : [];\r\n" + "\r\n"
				+ "    var index = [].indexOf.call(siblings, node);\r\n" + "    // convert to 1-based index\r\n"
				+ "    index++;\r\n" + "\r\n" + "	/*if(node.innerText.trim()==\"View All Shop By License\"){\r\n"
				+ "	console.log(siblings);\r\n" + "	console.log(index);\r\n" + "	}*/\r\n" + "\r\n"
				+ "    return (index === 1 && index === siblings.length) ? 0 : index;\r\n" + "}\r\n" + "\r\n"
				+ "function getNodeText(node) {\r\n" + "\r\n" + "    var text = getLabelText(node);\r\n" + "\r\n"
				+ "	if (text === '') {\r\n" + "		var parentNode = (node) ? node.parentNode : null;\r\n" + "\r\n"
				+ "		if (parentNode) {\r\n" + "			var clonedParentNode = parentNode.cloneNode(true);\r\n"
				+ "			var clonedNode = clonedParentNode.querySelector(\r\n"
				+ "				node.nodeName.toLowerCase());\r\n"
				+ "			clonedNode.parentNode.removeChild(clonedNode);\r\n"
				+ "			clonedParentNode = sanitizeNode(clonedParentNode, parentNode);\r\n" + "\r\n"
				+ "			text = clonedParentNode.textContent || clonedParentNode.innerText || '';\r\n"
				+ "			text = getSentences(text.trim())[0] || '';\r\n" + "		}\r\n" + "	}\r\n" + "\r\n"
				+ "	if (text === '') {\r\n" + "		text = (node) ? getNodeText(node.parentNode) : 'RandomSen';\r\n" + "	}\r\n"
				+ "\r\n" + "    return text;\r\n" + "}\r\n" + "\r\n" + "function getPageVisibleHTML(original) {\r\n"
				+ "    original = original || document.body;\r\n" + "    var cloned = original.cloneNode(true);\r\n"
				+ "    cloned = sanitizeNode(cloned, original);\r\n" + "    return cloned.outerHTML;\r\n" + "}\r\n"
				+ "\r\n" + "function getSanitizedText(text, max) {\r\n" + "	try{\r\n"
				+ "    var texts = (text || '').split(/\\s+/g);\r\n" + "	}catch(e){\r\n"
				+ "				if (e.message == 'Invalid flags supplied to RegExp constructor ' +'\\'' +'gg' +'\\''){\r\n"
				+ "					var texts = (text || '').split(/\\s+/);\r\n" + "				}\r\n"
				+ "			}\r\n" + "\r\n" + "    if (max) {\r\n" + "        texts = texts.slice(0, max);\r\n"
				+ "    }\r\n" + "\r\n" + "    return texts.join(' ').trim().replace(/[^a-zA-Z0-9\\. ]/g, '');\r\n"
				+ "}\r\n" + "\r\n" + "function getSentences(text, minimumWords) {\r\n"
				+ "    minimumWords = minimumWords || 5;\r\n" + "    var index = -1;\r\n" + "    var response = [];\r\n"
				+ "    var sentences = text.match(/[^\\r\\n.!?]+/gi) || [];\r\n" + "\r\n"
				+ "    for (var i = 0, j = sentences.length; i < j; i++) {\r\n"
				+ "        var sentence = sentences[i].trim();\r\n" + "\r\n" + "        if (sentence !== '') {\r\n"
				+ "            var words = (sentence.match(/\\b\\w+\\b/gi) || []).length;\r\n"
				+ "            if (words >= minimumWords) {\r\n" + "                // faster array push\r\n"
				+ "                response[++index] = sentence;\r\n" + "            }\r\n" + "        }\r\n"
				+ "    }\r\n" + "\r\n" + "    return response;\r\n" + "}\r\n" + "\r\n"
				+ "function getSentenceFrequency(sentences, words) {\r\n"
				+ "    if ({}.toString.call(sentences) !== '[object Array]') {\r\n" + "        return [];\r\n"
				+ "    }\r\n" + "\r\n" + "    var items = (words.tops.length) ? words.tops : words;\r\n"
				+ "    sentences = sentences.slice(0);\r\n" + "    sentences.frequencies = {};\r\n" + "\r\n"
				+ "    for (var i = 0, j = sentences.length; i < j; i++) {\r\n"
				+ "        var sentence = sentences[i];\r\n"
				+ "        var sentenceLowered = sentence.toLowerCase();\r\n"
				+ "        sentences.frequencies[sentence] = 0;\r\n" + "\r\n"
				+ "        for (var k = 0, l = items.length; k < l; k++) {\r\n"
				+ "            if (sentenceLowered.indexOf(items[k]) > -1) {\r\n"
				+ "                sentences.frequencies[sentence]++;\r\n" + "            }\r\n" + "        }\r\n"
				+ "    }\r\n" + "\r\n" + "    // desc\r\n" + "    sentences.sort(function(a, b) {\r\n"
				+ "        return sentences.frequencies[b] - sentences.frequencies[a];\r\n" + "    });\r\n" + "\r\n"
				+ "    return sentences;\r\n" + "}\r\n" + "\r\n" + "function getWordFrequency(text) {\r\n"
				+ "    var index = -1;\r\n" + "    var topIndex = -1;\r\n" + "    var words = [];\r\n"
				+ "    words.frequencies = {};\r\n" + "    words.tops = [];\r\n" + "\r\n"
				+ "    text.toLowerCase().split(/[\\s*\\.*\\,\\;\\+?\\#\\|:\\-\\/\\\\\\[\\]\\(\\)\\{\\}$%&0-9*]/).\r\n"
				+ "        map(function(k, v) {\r\n" + "            if (k && k.length > 1) {\r\n"
				+ "                words.frequencies[k]++ || (words.frequencies[k] = 1);\r\n" + "            }\r\n"
				+ "        });\r\n" + "\r\n" + "    for (var word in words.frequencies) {\r\n"
				+ "        words[++index] = word;\r\n" + "\r\n" + "        if (words.frequencies[word] > 1) {\r\n"
				+ "            words.tops[++topIndex] = word;\r\n" + "        }\r\n" + "    }\r\n" + "\r\n"
				+ "    // desc\r\n"
				+ "    words.sort(function(a, b) { return words.frequencies[b] - words.frequencies[a]; });\r\n"
				+ "    words.tops.sort(function(a, b) { return words.frequencies[b] - words.frequencies[a]; });\r\n"
				+ "\r\n" + "    return words;\r\n" + "}\r\n" + "\r\n" + "function isElementInViewport(el) {\r\n"
				+ "    if (typeof(jQuery) !== 'undefined' && el instanceof jQuery) {\r\n" + "        el = el[0];\r\n"
				+ "    }\r\n" + "\r\n" + "    var rect = el.getBoundingClientRect();\r\n"
				+ "    var windowHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n"
				+ "    var windowWidth = (window.innerWidth || document.documentElement.clientWidth);\r\n" + "\r\n"
				+ "    return ((rect.left > -1) && (rect.top > -1) &&\r\n"
				+ "        ((rect.left + rect.width) <= windowWidth) &&\r\n"
				+ "        ((rect.top + rect.height) <= windowHeight));\r\n" + "}\r\n" + "\r\n"
				+ "function removeNodes(nodes) {\r\n" + "    var type = {}.toString.call(nodes);\r\n" + "\r\n"
				+ "    if (type !== '[object Array]' &&\r\n"
				+ "            !(type === '[object NodeList]' || type === '[object Object]')) {\r\n"
				+ "        return;\r\n" + "    }\r\n" + "\r\n" + "    var index = -1;\r\n"
				+ "    var length = nodes.length;\r\n" + "\r\n" + "    while(++index < length) {\r\n"
				+ "        var node = nodes[index];\r\n" + "        if (node) {\r\n"
				+ "            (node.parentNode || { removeChild: function() {} }).removeChild(node);\r\n"
				+ "        }\r\n" + "    }\r\n" + "}\r\n" + "\r\n"
				+ "function sanitizeNode(clonedNode, originalNode) {\r\n"
				+ "    var comments = getComments(clonedNode);\r\n" + "    var excludes = (clonedNode) ?\r\n"
				+ "        clonedNode.querySelectorAll('img,input,link,option,script,select,style') : [];\r\n"
				+ "    var hiddens = getHiddens(clonedNode, originalNode);\r\n" + "    removeNodes(comments);\r\n"
				+ "    removeNodes(excludes);\r\n" + "    var excludedNode = clonedNode.cloneNode(true);\r\n"
				+ "    removeNodes(hiddens);\r\n" + "    // ng:view template doesn't have height,\r\n"
				+ "    // hence it will considered as hidden\r\n"
				+ "    if ((clonedNode.textContent || '').trim() === '') {\r\n"
				+ "        clonedNode = excludedNode;\r\n" + "    }\r\n" + "    return clonedNode;\r\n" + "}\r\n"
				+ "\r\n" + "function setDefinitions(input,pgsrc) {\r\n"
				+ "    //var root = document.implementation.createHTMLDocument('');\r\n"
				+ "    //root.body.innerHTML=document;\r\n" + "    var parser = new DOMParser();\r\n"
				+ "    var htmldoc = parser.parseFromString(pgsrc, \"text/html\");\r\n"
				+"console.log(htmldoc);"
				+ "    //window.open('http://www.amazon.com','_blank');\r\n" + "    var definitions = [];\r\n"
				+ "    var root = document.querySelector(input.nodes.root) || document;\r\n"
				+ "    var nodes = (root) ? root.querySelectorAll(input.nodes.selector) : [];\r\n"
				+ "    var type = {}.toString.call(nodes);\r\n" + "\r\n"
				+ "    if (!(type === '[object NodeList]' || type === '[object Object]')) {\r\n"
				+ "        input.definitions = definitions;\r\n" + "        return input;\r\n" + "    }\r\n" + "\r\n"
				+ "    var firsts = {};\r\n" + "    var hasField = false;\r\n" + "    var index = -1;\r\n"
				+ "    var longestName = 0;\r\n" + "    var submit = { label: '', text: '' };\r\n"
				+ "    var tags = document.getElementsByTagName('*');\r\n" + "    var texts = {};\r\n"
				+ "    var unsets = {};\r\n"
				+ "    var visibleOnly = (parseInt(input.nodes.visibility) === VISIBILITIES.VISIBLE);\r\n" + "\r\n"
				+ "    for (var i = 0, j = nodes.length; i < j; i++) {\r\n"
				+ "        var buffer = { attribute: {}, operation: {} };\r\n" + "        var definition = {};\r\n"
				+ "        var node = nodes[i];\r\n" + "\r\n" + "		var tdParse = true;\r\n" + "\r\n"
				+ "		// Updated by Bhaskar \"TBODY\"\r\n"
				+ "		if (node.nodeName == \"TBODY\" || node.nodeName == \"TD\" || node.nodeName == \"SPAN\" || node.nodeName == \"DIV\" || node.nodeName == \"P\"){\r\n"
				+ "			/*if(node.innerText==\"My Activities\" && node.nodeName == \"SPAN\"){\r\n"
				+ "			console.log(\"span node found\")\r\n" + "			}*/\r\n" + "\r\n"
				+ "			if (node.childNodes.length == 1){\r\n"
				+ "				if (node.firstChild.nodeName != '#text'){\r\n"
				+ "					tdParse =  false;\r\n" + "				}\r\n" + "			}\r\n" + "\r\n"
				+ "			if (node.childNodes.length > 1){\r\n" + "					tdParse =  false;\r\n"
				+ "			}\r\n" + "\r\n"
				+ "			for (; node && node.nodeType === ELEMENT_NODE; node = node.parentNode) {\r\n"
				+ "				if(node.parentNode.nodeName=='A' || node.parentNode.nodeName=='INPUT' || node.parentNode.nodeName=='BUTTON' || node.parentNode.nodeName=='SELECT'){\r\n"
				+ "					tdParse = false;\r\n" + "					break;\r\n" + "				}\r\n"
				+ "			}\r\n" + "			node = nodes[i];\r\n" + "\r\n"
				+ "			if(( node.nodeName == \"SPAN\" || node.nodeName == \"DIV\" )  && (node.parentNode.nodeName == \"SPAN\" || node.parentNode.nodeName == \"DIV\" || node.parentNode.nodeName == \"P\")){\r\n"
				+ "				var prntFlag = false;\r\n"
				+ "				var children = node.parentNode.childNodes;\r\n"
				+ "				for (child in children)\r\n" + "				{\r\n"
				+ "					if (children[child].nodeName=='#text'){\r\n"
				+ "						node = node.parentNode;\r\n" + "						prntFlag = true;\r\n"
				+ "						break;\r\n" + "					}\r\n" + "				}\r\n"
				+ "				if(!prntFlag){\r\n" + "					node = nodes[i];\r\n" + "				}\r\n"
				+ "			}\r\n" + "\r\n"
				+ "			if (node.nodeName == 'SPAN' && (node.getAttribute('class')=='x-btn-wrap x-btn-wrap-gw-top-menu-toolbar-small x-btn-split x-btn-split-right' ||\r\n"
				+ "			node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small g-unsavedwork-icon ' ||\r\n"
				+ "			node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small x-tbar-page-prev ' ||\r\n"
				+ "			node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small x-tbar-page-first ' ||\r\n"
				+ "			node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small x-tbar-page-next ' ||\r\n"
				+ "			node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small x-tbar-page-last ' ||\r\n"
				+ "			node.getAttribute('class')=='x-btn-icon-el x-btn-icon-el-plain-toolbar-small g-preferences-icon ')){\r\n"
				+ "				tdParse = true;\r\n" + "			}\r\n" + "\r\n" + "			// Added by Bhaskar\r\n"
				+ "            if (node.nodeName == \"TBODY\"){\r\n" + "            	tdParse = true;\r\n"
				+ "            }\r\n" + "\r\n" + "		}\r\n" + "\r\n" + "\r\n"
				+ "        if (visibleOnly && node.offsetHeight > 0 && tdParse) {\r\n"
				+ "            var action = '';\r\n" + "            var hasArgument = false;\r\n"
				+ "            var hasUnset = false;\r\n" + "            var label = '';\r\n"
				+ "			var text = node.textContent || node.innerText || '';\r\n"
				//+"console.log('---'+text);\r\n"
				+ "            var locator = getLocator(node, input.nodes.angular);\r\n" + "\r\n"
				+ "			// Added by Bhaskar\r\n"
				+ "            if (node.parentNode.nodeName == \"TR\" || node.parentNode.nodeName == \"TD\"){\r\n"
				+ "				break;\r\n" + "			}\r\n" + "\r\n"
				+ "            buffer.attribute.strategy = locator.strategy;\r\n"
				+ "            buffer.attribute.value = locator.value;\r\n"				
				+ "			buffer.attribute.secondStrategy = locator.secondStrategy; //Added by Sudha\r\n"
				+ "            buffer.attribute.secondValue = locator.secondValue; //Added by Sudha							 \r\n"
				+ "            buffer.sourceIndex = node.sourceIndex || [].indexOf.call(tags, node);\r\n" + "\r\n"
				+"console.log(buffer.attribute.strategy);"
				+"console.log(buffer.attribute.value);"
				+"console.log(buffer.attribute.secondStrategy);"
				+"console.log(buffer.attribute.secondValue);"
				+"console.log('bs');"
				+"console.log(node);"
				+"console.log(node.nodeName);"
				+ "            switch(node.nodeName) {\r\n" + "                case 'A':\r\n"
				+ "                    action = 'Click';\r\n" + "                    buffer.type = 'link';\r\n"
				+ "                    label = 'Link';\r\n"
				+ "                    text = text || getLinkText(node);\r\n" + "\r\n"
				+ "                    if (submit.text === '' && text.toLowerCase().indexOf('submit') > -1) {\r\n"
				+ "                        submit.label = label;\r\n"
				+ "                        submit.text = text;\r\n" + "                    }\r\n"
				+ "                    break;\r\n" + "                case 'BUTTON':\r\n"
				+ "                    action = 'Click';\r\n" + "                    buffer.type = 'button';\r\n"
				+ "                    label = 'Button';\r\n" + "\r\n"
				+ "                    if (submit.text === '' && ((node.type || '').toLowerCase() === 'submit' ||\r\n"
				+ "                            text.toLowerCase().indexOf('submit') > -1)) {\r\n"
				+ "                        submit.label = label;\r\n"
				+ "                        submit.text = text;\r\n" + "                    }\r\n"
				+ "                    break;\r\n" + "                case 'INPUT':\r\n"
				//+"console.log(inputType);"
				//+"console.log(node);"
				+ "                    var inputType = node.type || '';\r\n" + "\r\n"
				+ "                    if ('|button|image|submit|text|'.indexOf('|' + inputType + '|') > -1) {\r\n"
				//+"console.log('inside if');"
				+ "                        action = 'Click';\r\n"
				+ "                        buffer.type = 'button';\r\n"
				+ "                        label = 'Button';\r\n"
				+ "                        text = text || node.value || getNodeText(node);\r\n" + "\r\n"
				+ "                        if (inputType === 'submit') {\r\n"
				+ "                            submit.label = label;\r\n"
				+ "                            submit.text = text;\r\n" + "                        }\r\n"
				+ "                        else if (submit.text === '' && text.toLowerCase().\r\n"
				+ "                            indexOf('submit') > -1) {\r\n"
				+ "                                submit.label = label;\r\n"
				+ "                                submit.text = text;\r\n" + "                            }\r\n"
				+ "                    }\r\n" + "                    else {\r\n"
				+ "                        if (inputType === 'hidden') {\r\n" + "                            break;\r\n"
				+ "                        }\r\n" + "                        else if (inputType === 'checkbox') {\r\n"
				+ "                            hasUnset = true;\r\n" + "                        }\r\n"
				+ "                        else if ('|email|number|password|radio|search|tel|text|url|'.\r\n"
				+ "                                indexOf('|' + inputType + '|') > -1) {\r\n"
				//+"console.log('inside else if');"
				+ "                            hasArgument = true;\r\n" + "                        }\r\n" + "\r\n"
				+ "                        label = getLetter(inputType, LETTERS.PROPER);\r\n"
				+ "                        text = text || getNodeText(node);\r\n" + "\r\n"
				//+"console.log('label'+label+'text'+text);"
				+ "                        if (inputType === 'radio') {\r\n"
				+ "                            label = 'Radio Button';\r\n"
				+ "                            if (buffer.attribute.strategy !== 'name' && node.id) {\r\n"
				+ "                                buffer.attribute.strategy = 'id';   //Selva\r\n"
				+ "                                buffer.attribute.value = node.id;   //Selva\r\n"
				+ "                            }\r\n" + "\r\n"
				+ "                            /* var radioValueBuffer = {\r\n"
				+ "                                attribute: {\r\n"
				+ "									strategy: 'id',   //Selva\r\n"
				+ "                                    name: getLetter(getSanitizedText(text, 6) + ' Value',\r\n"
				+ "                                        input.attributes.letter),\r\n"
				+ "                                    value: node.id   //Selva\r\n"
				+ "                                },\r\n" + "                                operation: {},\r\n"
				+ "                                sourceIndex: -1,\r\n"
				+ "                                type: 'radio'   //Selva\r\n" + "                            };\r\n"
				+ "\r\n" + "                            // faster array push\r\n"
				+ "                            definitions[++index] = radioValueBuffer;\r\n" + "\r\n"
				+ "                            longestName = getLongestName(radioValueBuffer.attribute.name,\r\n"
				+ "                                longestName);  */\r\n" + "                        }\r\n" + "\r\n"
				+ "                        if ('|email|number|password|search|tel|text|url|'.\r\n"
				+ "                                indexOf('|' + inputType + '|') > -1) {\r\n"
				+ "                            inputType = 'text';\r\n" + "                        }\r\n" + "\r\n"
				+ "                        action = 'Set';\r\n" + "                        buffer.type = inputType;\r\n"
				+ "if(text == ''){\r\n"
				+ "            text = \"username_\";\r\n"
				+ "            }"
				+ "                    }\r\n" + "                    break;\r\n" 
				+ "                case 'SELECT':\r\n"
				+ "                    action = 'Set';\r\n" + "                    buffer.type = 'select';\r\n"
				+ "                    hasArgument = true;\r\n" + "                    hasUnset = true;\r\n"
				+ "                    label = 'Drop Down List';\r\n"
				+ "                    text = getNodeText(node);\r\n" + "                    break;\r\n"
				+ "                case 'TEXTAREA':\r\n" + "                    action = 'Set';\r\n"
				+ "                    buffer.type = 'label';\r\n" + "                    hasArgument = true;\r\n"
				+ "                    label = 'Textarea';\r\n" + "                    text = getNodeText(node);\r\n"
				+ "                    break;\r\n" + "				case 'TBODY':   //Bhaskar	\r\n"
				+ "                    action = 'None';\r\n" + "                    buffer.type = 'table';\r\n"
				+ "                    hasArgument = true;\r\n" + "                    label = 'Table';\r\n"
				+ "                    //text = getSpecialNodeText(node);\r\n"
				+ "                    text = \"Table\" + tableCount\r\n" + "                    break;\r\n"
				+ "                case 'TD':   //Selva\r\n" + "                    action = 'None';\r\n"
				+ "                    buffer.type = 'label';\r\n" + "                    hasArgument = true;\r\n"
				+ "                    label = 'Label';\r\n"
				+ "                    text = getSpecialNodeText(node);\r\n" + "                    break;\r\n"
				+ "				case 'SPAN':   //Selva\r\n" + "                    action = 'None';\r\n"
				+ "                    buffer.type = 'label';\r\n" + "                    hasArgument = true;\r\n"
				+ "                    label = 'Label';\r\n"
				+ "                    text = getSpecialNodeText(node);\r\n" + "                    break;\r\n"
				+ "				case 'DIV':   //Selva\r\n" + "                    action = 'None';\r\n"
				+ "                    buffer.type = 'label';\r\n" + "                    hasArgument = true;\r\n"
				+ "                    label = 'Label';\r\n"
				+ "                    text = getSpecialNodeText(node);\r\n" 
				//+"console.log('*DIV-text->'+ text);"
				+ "                    break;\r\n"
				+ "				case 'P':   //Selva\r\n" + "                    action = 'None';\r\n"
				+ "                    buffer.type = 'label';\r\n" + "                    hasArgument = true;\r\n"
				+ "                    label = 'Label';\r\n"
				+ "                    text = getSpecialNodeText(node);\r\n" + "                    break;\r\n" + "\r\n"
				+ "            }\r\n" + "\r\n" + "            var fullText = getSanitizedText(text);\r\n"
				+ "            text = getSanitizedText(text, 10);\r\n" + "\r\n"
								+ "            if (text !== '') {\r\n"
				+ "                if (texts[text]) {\r\n" + "                    texts[text]++;\r\n" + "\r\n"
				+ "                    if (texts[text] === 2) {\r\n"
				+ "                        var firstText = text + ' 1';\r\n" + "\r\n"
				+ "                        // need to adjust the first entry and make it as part of the group\r\n"
				+ "                        definition = getDefinition({\r\n"
				+ "                            action: action,\r\n"
				+ "                            buffer: definitions[firsts[text]],\r\n"
				+ "                            fullText: fullText,\r\n"
				+ "                            hasArgument: hasArgument,\r\n"
				+ "                            label: label,\r\n" + "                            letters: {\r\n"
				+ "                                attribute: input.attributes.letter,\r\n"
				+ "                                operation: input.operations.letter\r\n"
				+ "                            },\r\n" + "                            text: firstText,\r\n"
				+ "							node\r\n" + "                        });\r\n" + "\r\n"
				+ "                        definitions[firsts[text]] = definition;\r\n" + "\r\n"
				+ "                        if (hasUnset) {\r\n"
				+ "                            definition = getDefinition({\r\n"
				+ "                                action: action,\r\n"
				+ "                                buffer: definitions[unsets[text]],\r\n"
				+ "                                fullText: fullText,\r\n"
				+ "                                hasArgument: hasArgument,\r\n"
				+ "                                label: label,\r\n" + "                                letters: {\r\n"
				+ "                                    attribute: input.attributes.letter,\r\n"
				+ "                                    operation: input.operations.letter\r\n"
				+ "                                },\r\n" + "                                negate: hasUnset,\r\n"
				+ "                                text: firstText,\r\n" + "								node\r\n"
				+ "                            });\r\n" + "\r\n"
				+ "                            definitions[unsets[text]] = definition;\r\n"
				+ "                        }\r\n" + "                    }\r\n" + "\r\n"
				+ "                    text = text + ' ' + texts[text];\r\n" + "                }\r\n"
				+ "                else {\r\n" + "                    firsts[text] = index + 1;\r\n"
				+ "                    texts[text] = 1;\r\n" + "\r\n" + "                    if (hasUnset) {\r\n"
				+ "                        unsets[text] = index + 2;\r\n" + "                    }\r\n"
				+ "                }\r\n" + "\r\n" + "                definition = getDefinition({\r\n"
				+ "                    action: action,\r\n" + "                    buffer: buffer,\r\n"
				+ "                    fullText: fullText,\r\n" + "                    hasArgument: hasArgument,\r\n"
				+ "                    label: label,\r\n" + "                    letters: {\r\n"
				+ "                        attribute: input.attributes.letter,\r\n"
				+ "                        operation: input.operations.letter\r\n" + "                    },\r\n"
				+ "                    text: text,\r\n" + "					node\r\n" + "                });\r\n"
				+ "\r\n" + "                // faster array push\r\n"
				+ "                definitions[++index] = definition;\r\n" + "\r\n"
				+ "                longestName = getLongestName(definition.attribute.name, longestName);\r\n" + "\r\n"
				+ "                if (hasUnset) {\r\n" + "                    definition = getDefinition({\r\n"
				+ "                        action: action,\r\n" + "                        buffer: buffer,\r\n"
				+ "                        fullText: fullText,\r\n"
				+ "                        hasArgument: hasArgument,\r\n" + "                        label: label,\r\n"
				+ "                        letters: {\r\n"
				+ "                            attribute: input.attributes.letter,\r\n"
				+ "                            operation: input.operations.letter\r\n"
				+ "                        },\r\n" + "                        negate: hasUnset,\r\n"
				+ "                        text: text,\r\n" + "						node\r\n"
				+ "                    });\r\n" + "\r\n" + "                    // faster array push\r\n"
				+ "                    definitions[++index] = definition;\r\n" + "                }\r\n" + "\r\n"
				+ "                if (!hasField && action === 'Set') {\r\n"
				+ "                    hasField = true;\r\n" + "                }\r\n" + "            }\r\n"
				+ "        }\r\n" + "    }\r\n" + "\r\n" + "    // operation extras\r\n"
				+ "    if (hasField && input.operations.extras.fill) {\r\n" 
				+ "        var buffer = {\r\n"
				+ "            attribute: {},\r\n" + "            operation: {\r\n"
				+ "                documentation: 'Fill every fields in the page.',\r\n"
				+ "                name: getLetter('Fill', input.operations.letter)\r\n" + "            },\r\n"
				+ "            negate: true,\r\n" + "            sourceIndex: -1,\r\n" + "            type: 'fill'\r\n"
				+ "        };\r\n" + "\r\n" + "        // faster array push\r\n"
				+ "        definitions[++index] = buffer;\r\n" + "    }\r\n" + "\r\n"
				+ "    if (hasField && submit.text !== '' && input.operations.extras['fill.submit']) {\r\n"
				+ "        var buffer = {\r\n" + "            attribute: {},\r\n" + "            operation: {\r\n"
				+ "                documentation: 'Fill every fields in the page and submit it to target page.',\r\n"
				+ "                name: getLetter('Fill And Submit', input.operations.letter)\r\n"
				+ "            },\r\n" + "            negate: true,\r\n" + "            sourceIndex: -1,\r\n"
				+ "            target: {\r\n" + "                modelName: input.model.target\r\n"
				+ "            },\r\n" + "            type: 'fill.submit'\r\n" + "        };\r\n" + "\r\n"
				+ "        // faster array push\r\n" + "        definitions[++index] = buffer;\r\n" + "    }\r\n"
				+ "\r\n" + "    if (submit.text !== '' && input.operations.extras.submit) {\r\n"
				+ "        var buffer = {\r\n" + "            attribute: {},\r\n" + "            operation: {\r\n"
				+ "                documentation: 'Submit the form to target page.',\r\n"
				+ "                name: getLetter('Submit', input.operations.letter)\r\n" + "            },\r\n"
				+ "            negate: true,\r\n" + "            sourceIndex: -1,\r\n" + "            target: {\r\n"
				+ "                modelName: input.model.target,\r\n"
				+ "                name: getLetter('Click ' + getSanitizedText(submit.text) + ' ' +\r\n"
				+ "                    submit.label, input.operations.letter)\r\n" + "            },\r\n"
				+ "            type: 'submit'\r\n" + "        };\r\n" + "\r\n" + "        // faster array push\r\n"
				+ "        definitions[++index] = buffer;\r\n" + "    }\r\n" + "\r\n"
				+ "    if (input.operations.extras['verify.loaded']) {\r\n"
				+ "        var sourceText = getPageVisibleHTML();\r\n"
				+ "        sourceText = sourceText.replace(/(<([^>]+)>)/gi, '\\n');\r\n"
				+ "        var sentences = getSentences(sourceText);\r\n"
				+ "        var words = getWordFrequency(sourceText);\r\n"
				+ "        sentences = getSentenceFrequency(sentences, words);\r\n"
				+ "        var sentence = sentences[0] || '';\r\n" + "\r\n" + "        // !robot\r\n"
				+ "        if (input.attributes.letter !== LETTERS.LOWER && input.attributes.indent !== 1 &&\r\n"
				+ "                input.attributes.separator !== '') {\r\n"
				+ "            //sentence = sentence.replace(/\"/g, '\\\\\"');\r\n"
				+ "            sentence = sentence.replace('\"', '\\\\\"')\r\n" + "        }\r\n" + "\r\n"
				+ "        var buffer = {\r\n" + "            attribute: {\r\n"
				+ "                name: getLetter('Page Loaded Text', input.attributes.letter),\r\n"
				+ "                value: sentence\r\n" + "            },\r\n" + "            operation: {\r\n"
				+ "                documentation: 'Verify that the page loaded completely.',\r\n"
				+ "                name: getLetter('Verify Page Loaded', input.operations.letter)\r\n"
				+ "            },\r\n" + "            sourceIndex: -1,\r\n" + "            type: 'verify.loaded'\r\n"
				+ "        };\r\n" + "\r\n" + "        // faster array push\r\n"
				+ "        definitions[++index] = buffer;\r\n" + "    }\r\n" + "\r\n"
				+ "    if (input.operations.extras['verify.url']) {\r\n"
				+ "        // it's better to generate more information than less\r\n"
				+ "        var uri = location.href.replace(document.location.origin, '');\r\n" + "\r\n"
				+ "        var buffer = {\r\n" + "            attribute: {\r\n"
				+ "                name: getLetter('Page Url', input.attributes.letter),\r\n"
				+ "                value: uri\r\n" + "            },\r\n" + "            operation: {\r\n"
				+ "                documentation: 'Verify that current page URL matches the expected URL.',\r\n"
				+ "                name: getLetter('Verify Page Url', input.operations.letter)\r\n"
				+ "            },\r\n" + "            sourceIndex: -1,\r\n" + "            type: 'verify.url'\r\n"
				+ "        };\r\n" + "\r\n" + "        // faster array push\r\n"
				+ "        definitions[++index] = buffer;\r\n" + "    }\r\n" + "\r\n"
				+ "    input.attributes.longestName = longestName;\r\n" + "\r\n"
				+ "    input.definitions = definitions;\r\n" 
				+ "	input = rmvDuplctAtribVal(input);\r\n" + "	\r\n"
				+ "    return input;\r\n" + "}\r\n" + "\r\n" + "function rmvDuplctAtribVal(input){       //Selva\r\n"
				+ "    var lclDef = new Array();\r\n" + "    lclDef = input.definitions;\r\n"
				+ "    var lclDefLen = input.definitions.length;\r\n"
				+ "    for (var vc = 0; vc < lclDefLen - 3; vc++) {\r\n" + "\r\n"
				+ "           for (var vc2 = vc + 1; vc2 < lclDefLen - 2; vc2++) {\r\n" + "\r\n"
				+ "                 //console.log(\"iteration no1 \"+vc +\" no2 \" +vc2);\r\n"
				+ "                 var attV1 = Object.extend(lclDef[vc].attribute);\r\n"
				+ "                 var attV2 = Object.extend(lclDef[vc2].attribute);\r\n"
				+ "                 var aval1 = attV1.value;\r\n" + "                 var aval2 = attV2.value;\r\n"
				+ "                                  var attName2 = input.definitions[vc2].attribute.name;\r\n"
				+ "                 if (aval1 == aval2) {              //Updated by Sudha\r\n"
				+ "                        console.log(\"duplicate attr val is \"+aval2);\r\n"
				+ "                        if (attName2.includes(\"SecondReference\")) {\r\n"
				+ "                               input.definitions.splice(vc2, 1);\r\n"
				+ "                               vc2--;\r\n" + "                               lclDefLen--;\r\n"
				+ "                        } else if (input.definitions[vc].attribute.secondValue !== 'undefined' && input.definitions[vc2].attribute.secondValue !== 'undefined') {\r\n"
				+ "                               input.definitions[vc].attribute.strategy = input.definitions[vc].attribute.secondStrategy;\r\n"
				+ "                               input.definitions[vc].attribute.value = input.definitions[vc].attribute.secondValue;\r\n"
				+ "                               input.definitions[vc2].attribute.strategy = input.definitions[vc2].attribute.secondStrategy;\r\n"
				+ "                               input.definitions[vc2].attribute.value = input.definitions[vc2].attribute.secondValue;\r\n"
				+ "                        } \r\n" + "                 } //\r\n" + "           }\r\n" + "    }\r\n"
				+ "    return input;\r\n" + "}	\r\n" + "\r\n" + "return generate(arguments[0]);";
	}

}
